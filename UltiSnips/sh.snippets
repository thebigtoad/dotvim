# Bash snippets

snippet cmt "# A comment" b
# $0
endsnippet

snippet green "${GREEN}....${NC}" i
${GREEN}${1}${NC}$0
endsnippet

snippet blue "${BLUE}....${NC}" i
${BLUE}${1}${NC}$0
endsnippet

snippet col "${<ENTER COLOUR>}....${NC}" i
${$1}${VISUAL}${NC}$0
endsnippet

snippet quot "Surround with quoted ${...}"
"${${VISUAL/\$(.*)/$1/g}}"$0
endsnippet

snippet cecho "echo -e ${SOME_COLOUR}....${NC}" b
echo -e "${${1:GREEN}}$2${NC}"
endsnippet

snippet qv "Quoted variable, ${...}" i
"${$1}"$0
endsnippet

snippet uv "unquoted variable, ${...}" i
${$1}$0
endsnippet

snippet arg "local my_variable=$1; shift" b
local $1="\$1"; shift
$0
endsnippet

snippet chkargs "Check arguents count" b
if [ \${#} -${1:ne} ${2:n} ]; then
  echo -e "${RED}Error${NC}: Invalid arguments${NC}"
	echo -e "Usage: \$0 $3"
	exit 1
fi
$0
endsnippet

snippet chkfile "Check file exists" b
if [ ! -f "${1:file_path}" ]; then
  echo -e "${RED}Error${NC}: File ${$1} does not exist${NC}"
	exit 1
fi
$0
endsnippet

snippet chkdir "Check directory exists" b
if [ ! -d "${1:dir_path}" ]; then
  echo -e "${RED}Error${NC}: File ${$1} does not exist${NC}"
	exit 1
fi
$0
endsnippet

snippet subshellvalue "local my_var; my_var=$(...)" b
local $1
$1="$($2)"
$0
endsnippet

snippet fun "Function (no args)" b
${1:function_name}() {
  $0
}
endsnippet

snippet fun1 "Function (1 arg)" b
${1:function_name}() {
	local $2="\$1"; shift

  $0
}
endsnippet

snippet fun2 "Function (2 arg)" b
${1:function_name}() {
	local $2="\$1"; shift
	local $3="\$1"; shift

  $0
}
endsnippet

snippet debugv "Debug value statement" b
debug_value "$1" "${$1}"
endsnippet

snippet debug "Debug statement" b
debug "$1"
endsnippet

snippet unused "Shellcheck disable SC2034 Unused variable" b
# shellcheck disable=SC2034
endsnippet

snippet disable "Shellcheck disable SCXXXX" b
# shellcheck disable=SC$0
endsnippet
	

snippet cols "Add setup_echo_colours() {...}" b
setup_echo_colours() {
  # Exit the script on any error
  set -e

  # shellcheck disable=SC2034
  if [ "${MONOCHROME}" = true ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    BLUE2=''
    DGREY=''
    NC='' # No Colour
  else 
    RED='\033[1;31m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[1;34m'
    BLUE2='\033[1;34m'
    DGREY='\e[90m'
    NC='\033[0m' # No Colour
  fi
}
endsnippet

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet bash "Bash script skeleton" b
#!/usr/bin/env bash

set -e

setup_echo_colours() {
  # Exit the script on any error
  set -e

  # shellcheck disable=SC2034
  if [ "${MONOCHROME}" = true ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    BLUE2=''
    DGREY=''
    NC='' # No Colour
  else 
    RED='\033[1;31m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[1;34m'
    BLUE2='\033[1;34m'
    DGREY='\e[90m'
    NC='\033[0m' # No Colour
  fi
}

debug_value() {
  local name="\$1"; shift
  local value="\$1"; shift
  
  if [ "${IS_DEBUG}" = true ]; then
    echo -e "${DGREY}DEBUG ${name}: ${value}${NC}"
  fi
}

debug() {
  local str="\$1"; shift
  
  if [ "${IS_DEBUG}" = true ]; then
    echo -e "${DGREY}DEBUG ${str}${NC}"
  fi
}

main() {
  IS_DEBUG=false

  setup_echo_colours

	$0
}

main "$@"
endsnippet
